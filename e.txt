// src/components/Topics.js
import React, { useState } from 'react';
import styled from 'styled-components';
import { useTrail, animated, useSpring } from 'react-spring';

const TopicsWrapper = styled.section`
  margin: 4rem 0;
  padding: 2rem;
  background-color: ${props => props.theme.colors.background};
  border-radius: 8px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
`;

const Title = styled.h2`
  font-size: 2rem;
  margin-bottom: 2rem;
  text-align: center;
  color: ${props => props.theme.colors.primary};
`;

const TopicGrid = styled.div`
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 1rem;
`;

const TopicItem = styled(animated.div)`
  background-color: ${props => props.theme.colors.tertiary};
  color: ${props => props.theme.colors.background};
  padding: 1rem;
  border-radius: 8px;
  text-align: center;
  cursor: pointer;
  transition: transform 0.3s ease, background-color 0.3s ease;
  position: relative;
  overflow: hidden;

  &:hover {
    transform: translateY(-5px);
    background-color: ${props => props.theme.colors.primary};
  }
`;

const TopicTitle = styled.h3`
  margin-bottom: 0.5rem;
  font-size: 1.2rem;
`;

const TopicDescription = styled(animated.p)`
  font-size: 0.9rem;
  opacity: 0.8;
`;

const topics = [
  { title: 'Recrutement', description: 'Stratégies et meilleures pratiques pour attirer les meilleurs talents.' },
  { title: 'Rémunération', description: 'Politiques salariales équitables et compétitives.' },
  { title: 'Code de travail', description: 'Comprendre et appliquer la législation du travail algérienne.' },
  { title: 'Droit social', description: 'Aspects juridiques des relations employeur-employé.' },
  { title: 'Innovation RH', description: 'Nouvelles technologies et tendances dans la gestion des ressources humaines.' },
  { title: 'Intégration RH', description: 'Processus d\'accueil et d\'intégration des nouveaux employés.' },
];

function Topics() {
  const [hoveredIndex, setHoveredIndex] = useState(null);

  const trail = useTrail(topics.length, {
    from: { opacity: 0, transform: 'scale(0.8)' },
    to: { opacity: 1, transform: 'scale(1)' },
    config: { tension: 300, friction: 10 },
  });

  const descriptionSpring = useSpring({
    opacity: hoveredIndex !== null ? 1 : 0,
    transform: hoveredIndex !== null ? 'translateY(0)' : 'translateY(20px)',
    config: { tension: 300, friction: 10 },
  });

  return (
    <TopicsWrapper>
      <Title>Nos sujets</Title>
      <TopicGrid>
        {trail.map((props, index) => (
          <TopicItem
            key={topics[index].title}
            style={props}
            onMouseEnter={() => setHoveredIndex(index)}
            onMouseLeave={() => setHoveredIndex(null)}
          >
            <TopicTitle>{topics[index].title}</TopicTitle>
            {hoveredIndex === index && (
              <TopicDescription style={descriptionSpring}>
                {topics[index].description}
              </TopicDescription>
            )}
          </TopicItem>
        ))}
      </TopicGrid>
    </TopicsWrapper>
  );
}

export default Topics;




// src/components/Hero.js
import React from 'react';
import styled from 'styled-components';
import { useSpring, animated } from 'react-spring';

const HeroWrapper = styled.section`
  text-align: center;
  padding: 4rem 0;
  background-color: ${props => props.theme.colors.tertiary};
  color: ${props => props.theme.colors.background};
`;

const Title = styled(animated.h1)`
  font-size: 3rem;
  margin-bottom: 1rem;
  color: ${props => props.theme.colors.primary};
`;

const Subtitle = styled(animated.p)`
  font-size: 1.5rem;
  margin-bottom: 2rem;
  color: ${props => props.theme.colors.secondary};
`;

const Button = styled.button`
  background-color: ${props => props.theme.colors.primary};
  color: ${props => props.theme.colors.background};
  border: none;
  padding: 0.75rem 1.5rem;
  font-size: 1rem;
  cursor: pointer;
  border-radius: 4px;
  transition: background-color 0.3s ease;

  &:hover {
    background-color: ${props => props.theme.colors.secondary};
  }
`;

function Hero() {
  const titleAnimation = useSpring({
    from: { opacity: 0, transform: 'translateY(-50px)' },
    to: { opacity: 1, transform: 'translateY(0)' },
    config: { tension: 300, friction: 10 },
  });

  const subtitleAnimation = useSpring({
    from: { opacity: 0, transform: 'translateY(50px)' },
    to: { opacity: 1, transform: 'translateY(0)' },
    config: { tension: 300, friction: 10 },
    delay: 300,
  });

  return (
    <HeroWrapper>
      <Title style={titleAnimation}>#HRtalksDZ</Title>
      <Subtitle style={subtitleAnimation}>
        Le Podcast dédié aux professionnels RH Algériens
      </Subtitle>
      <Button>Écoutez maintenant</Button>
    </HeroWrapper>
  );
}

export default Hero;




// src/components/Header.js
import React from 'react';
import styled from 'styled-components';
import { Link } from 'react-router-dom';

const HeaderWrapper = styled.header`
  background-color: ${props => props.theme.colors.tertiary};
  padding: 1rem;
`;

const Nav = styled.nav`
  display: flex;
  justify-content: space-between;
  align-items: center;
`;

const Logo = styled(Link)`
  font-size: 1.5rem;
  font-weight: bold;
  color: ${props => props.theme.colors.primary};
`;

const NavLinks = styled.div`
  display: flex;
  gap: 1rem;
`;

const NavLink = styled(Link)`
  color: ${props => props.theme.colors.secondary};
  &:hover {
    color: ${props => props.theme.colors.primary};
    text-decoration: underline;
  }
`;

function Header() {
  return (
    <HeaderWrapper>
      <Nav>
        <Logo to="/">#HRtalksDZ</Logo>
        <NavLinks>
          <NavLink to="/">Accueil</NavLink>
          <NavLink to="/episodes">Épisodes</NavLink>
        </NavLinks>
      </Nav>
    </HeaderWrapper>
  );
}

export default Header;



// src/components/Footer.js
import React from 'react';
import styled from 'styled-components';
import { FaFacebook, FaTwitter, FaLinkedin } from 'react-icons/fa';

const FooterWrapper = styled.footer`
  background-color: ${props => props.theme.colors.tertiary};
  color: ${props => props.theme.colors.background};
  padding: 2rem;
  text-align: center;
`;

const SocialIcons = styled.div`
  display: flex;
  justify-content: center;
  gap: 1rem;
  margin-top: 1rem;
`;

const SocialIcon = styled.a`
  color: ${props => props.theme.colors.secondary};
  font-size: 1.5rem;
  &:hover {
    color: ${props => props.theme.colors.primary};
  }
`;
function Footer() {
  return (
    <FooterWrapper>
      <p>&copy; 2024 #HRtalksDZ. Tous droits réservés.</p>
      <SocialIcons>
        <SocialIcon href="#"><FaFacebook /></SocialIcon>
        <SocialIcon href="#"><FaTwitter /></SocialIcon>
        <SocialIcon href="#"><FaLinkedin /></SocialIcon>
      </SocialIcons>
    </FooterWrapper>
  );
}

export default Footer;



// src/components/About.js
import React from 'react';
import styled from 'styled-components';

const AboutWrapper = styled.section`
  margin: 4rem 0;
  background-color: ${props => props.theme.colors.background};
  padding: 2rem;
  border-radius: 8px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
`;

const Title = styled.h2`
  font-size: 2rem;
  margin-bottom: 1rem;
  color: ${props => props.theme.colors.primary};
`;

const Content = styled.p`
  font-size: 1.1rem;
  line-height: 1.6;
  color: ${props => props.theme.colors.text};
`;

function About() {
  return (
    <AboutWrapper>
      <Title>À propos de #HRtalksDZ</Title>
      <Content>
        #HRtalksDZ est le meilleur endroit où vous bénéficierez des connaissances 
        et du savoir-faire des experts RH algériens. Nos invités dans chaque épisode 
        partageront avec vous leurs expériences et répondront à vos questions, 
        en garantissant que vous disposerez d'une information claire, directe et crédible.
      </Content>
    </AboutWrapper>
  );
}

export default About;










// src/App.js
import React from 'react';
import { BrowserRouter as Router, Route, Routes } from 'react-router-dom';
import { ThemeProvider } from 'styled-components';
import GlobalStyle from './styles/GlobalStyle';
import theme from './styles/theme';
import Header from './components/Header';
import HomePage from './pages/HomePage';
import EpisodesPage from './pages/EpisodesPage';
import Footer from './components/Footer';

function App() {
  return (
    <ThemeProvider theme={theme}>
      <GlobalStyle />
      <Router>
        <Header />
        <Routes>
          <Route path="/" element={<HomePage />} />
          <Route path="/episodes" element={<EpisodesPage />} />
        </Routes>
        <Footer />
      </Router>
    </ThemeProvider>
  );
}

export default App;



// models/episode.model.js
const mongoose = require('mongoose');

const Schema = mongoose.Schema;

const episodeSchema = new Schema({
  title: { type: String, required: true },
  description: { type: String, required: true },
  releaseDate: { type: Date, required: true },
  duration: { type: Number, required: true },
}, {
  timestamps: true,
});

const Episode = mongoose.model('Episode', episodeSchema);

module.exports = Episode;



// routes/episodes.js
const router = require('express').Router();
let Episode = require('../models/episode.model');

router.route('/').get((req, res) => {
  Episode.find()
    .then(episodes => res.json(episodes))
    .catch(err => res.status(400).json('Error: ' + err));
});

router.route('/add').post((req, res) => {
  const { title, description, releaseDate, duration } = req.body;

  const newEpisode = new Episode({
    title,
    description,
    releaseDate,
    duration,
  });

  newEpisode.save()
    .then(() => res.json('Episode added!'))
    .catch(err => res.status(400).json('Error: ' + err));
});

module.exports = router;







// server.js
const express = require('express');
const cors = require('cors');
const mongoose = require('mongoose');
require('dotenv').config();

const app = express();
const port = process.env.PORT || 5000;

app.use(cors());
app.use(express.json());

// Connect to MongoDB
mongoose.connect(process.env.MONGODB_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

const connection = mongoose.connection;
connection.once('open', () => {
  console.log('MongoDB database connection established successfully');
});

// Routes
const episodesRouter = require('./routes/episodes');
app.use('/api/episodes', episodesRouter);

app.listen(5000, () => {
  console.log(`Server is running on port: ${5000}`);
});
